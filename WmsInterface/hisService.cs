//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。


//     运行库版本:2.0.50727.42
//
//     对此文件的更改可能会导致不正确的行为，并且如果


//     重新生成代码，这些更改将会丢失。


// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=2.0.50727.42。


// 

//namespace rdhl.hn.ncms {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="hisserviceSoap", Namespace="rdhl.hn.his")]
    public partial class hisservice : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback testConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback rdhlhnhisifOperationCompleted;

        /// <remarks/>
        public hisservice()
        {
            this.Url = "http://localhost/rdhelp/hisservice/hisservice.asmx";
        }
        public hisservice(string currurl)
        {
            this.Url = currurl;
        }
        
        /// <remarks/>
        public event testConnectionCompletedEventHandler testConnectionCompleted;
        
        /// <remarks/>
        public event rdhlhnhisifCompletedEventHandler rdhlhnhisifCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("rdhl.hn.his/testConnection", RequestNamespace="rdhl.hn.his", ResponseNamespace="rdhl.hn.his", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string testConnection(string servername) {
            object[] results = this.Invoke("testConnection", new object[] {
                        servername});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegintestConnection(string servername, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("testConnection", new object[] {
                        servername}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndtestConnection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void testConnectionAsync(string servername) {
            this.testConnectionAsync(servername, null);
        }
        
        /// <remarks/>
        public void testConnectionAsync(string servername, object userState) {
            if ((this.testConnectionOperationCompleted == null)) {
                this.testConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OntestConnectionOperationCompleted);
            }
            this.InvokeAsync("testConnection", new object[] {
                        servername}, this.testConnectionOperationCompleted, userState);
        }
        
        private void OntestConnectionOperationCompleted(object arg) {
            if ((this.testConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.testConnectionCompleted(this, new testConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("rdhl.hn.his/rdhlhnhisif", RequestNamespace="rdhl.hn.his", ResponseNamespace="rdhl.hn.his", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool rdhlhnhisif(string servername, string dbname, string user, string pwd, string requestParmXML, System.Data.DataSet dsin, out System.Data.DataSet dsout, out string retDataXML) {
            object[] results = this.Invoke("rdhlhnhisif", new object[] {
                        servername,
                        dbname,
                        user,
                        pwd,
                        requestParmXML,
                        dsin});
            dsout = ((System.Data.DataSet)(results[1]));
            retDataXML = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginrdhlhnhisif(string servername, string dbname, string user, string pwd, string requestParmXML, System.Data.DataSet dsin, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("rdhlhnhisif", new object[] {
                        servername,
                        dbname,
                        user,
                        pwd,
                        requestParmXML,
                        dsin}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool Endrdhlhnhisif(System.IAsyncResult asyncResult, out System.Data.DataSet dsout, out string retDataXML) {
            object[] results = this.EndInvoke(asyncResult);
            dsout = ((System.Data.DataSet)(results[1]));
            retDataXML = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void rdhlhnhisifAsync(string servername, string dbname, string user, string pwd, string requestParmXML, System.Data.DataSet dsin) {
            this.rdhlhnhisifAsync(servername, dbname, user, pwd, requestParmXML, dsin, null);
        }
        
        /// <remarks/>
        public void rdhlhnhisifAsync(string servername, string dbname, string user, string pwd, string requestParmXML, System.Data.DataSet dsin, object userState) {
            if ((this.rdhlhnhisifOperationCompleted == null)) {
                this.rdhlhnhisifOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrdhlhnhisifOperationCompleted);
            }
            this.InvokeAsync("rdhlhnhisif", new object[] {
                        servername,
                        dbname,
                        user,
                        pwd,
                        requestParmXML,
                        dsin}, this.rdhlhnhisifOperationCompleted, userState);
        }
        
        private void OnrdhlhnhisifOperationCompleted(object arg) {
            if ((this.rdhlhnhisifCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.rdhlhnhisifCompleted(this, new rdhlhnhisifCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void testConnectionCompletedEventHandler(object sender, testConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class testConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal testConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void rdhlhnhisifCompletedEventHandler(object sender, rdhlhnhisifCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class rdhlhnhisifCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal rdhlhnhisifCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet dsout {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string retDataXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
//}
